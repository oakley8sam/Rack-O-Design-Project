import java.awt.*;

import javax.swing.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Master extends JFrame implements ActionListener {
	MainWindow main;
	playerWindow pw1, pw2, pw3, pw4;
	Game game;
	String congratulations, hasRackO;
	int numPlay;
	int drawDeckSize = 20;

	Master(String title) {
		super(title);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		BoxLayout boxLayout = new BoxLayout(this.getContentPane(),
				BoxLayout.Y_AXIS);
		setLayout(boxLayout);
		// creates and adds player and main game windows
		main = new MainWindow(this);
		pw1 = new playerWindow(this, 1);
		pw2 = new playerWindow(this, 2);
		pw3 = new playerWindow(this, 3);
		pw4 = new playerWindow(this, 4);
		numPlay = 0;
		game = new Game();

		add(pw1);
		add(pw2);
		add(main);
		add(pw3);
		add(pw4);

		setVisible(true);
		setSize(1200, 800);
	}

	public void actionPerformed(ActionEvent evt) {
		// actions upon button presses
		if (evt.getActionCommand().equals("start")) {
			// starts the game when a number of players is entered in the text
			// field and the button is pressed
			// if there are less than 3 or 4 players, those player windows will
			// dissapear
			numPlay = Integer.parseInt(main.numPlay.getText().substring(
					main.numPlay.getText().length() - 1));
			game.newGame(numPlay);
			game.newHand(numPlay);
			main.numCardsInDrawPile.setText(Integer.toString(drawDeckSize));
			if (numPlay < 4) {
				pw4.setVisible(false);
				if (numPlay < 3) {
					pw3.setVisible(false);
				}
			}
		}
		if (evt.getActionCommand().equals("draw")) {
			// draws from the draw pile for each player based on round,
			// different mods for different number of players
			// in order to keep the rounds accurate and make sure it is the
			// correct person's turn
			if (numPlay == 2) {
				if (game.round % 2 == 0) {
					pw1.hand.setText("" + game.getDraw().peek());
					game.getPlayer1().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 2 == 1) {
					pw2.hand.setText("" + game.getDraw().peek());
					game.getPlayer2().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
			}
			if (numPlay == 3) {
				if (game.round % 3 == 0) {
					pw1.hand.setText("" + game.getDraw().peek());
					game.getPlayer1().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 3 == 1) {
					pw2.hand.setText("" + game.getDraw().peek());
					game.getPlayer2().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 3 == 2) {
					pw3.hand.setText("" + game.getDraw().peek());
					game.getPlayer3().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
			}
			if (numPlay == 4) {
				if (game.round % 4 == 0) {
					pw1.hand.setText("" + game.getDraw().peek());
					game.getPlayer1().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 4 == 1) {
					pw2.hand.setText("" + game.getDraw().peek());
					game.getPlayer2().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 4 == 2) {
					pw3.hand.setText("" + game.getDraw().peek());
					game.getPlayer3().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (game.round % 4 == 3) {
					pw4.hand.setText("" + game.getDraw().peek());
					game.getPlayer4().getHand().add(game.getDraw().pop());
					drawDeckSize--;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
			}
		}
		if (evt.getActionCommand().equals("discard")) {
			// draws from the discard pile for each player based on round,
			// different mods for different number of players in order
			// to keep the rounds accurate and make sure it is the correct
			// person's turn
			if (numPlay == 2) {
				if (game.round % 2 == 0) {
					pw1.hand.setText("" + game.getDiscard().peek());
					game.getPlayer1().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 2 == 1) {
					pw2.hand.setText("" + game.getDiscard().peek());
					game.getPlayer2().getHand().add(game.getDiscard().pop());
				}
			}
			if (numPlay == 3) {
				if (game.round % 3 == 0) {
					pw1.hand.setText("" + game.getDiscard().peek());
					game.getPlayer1().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 3 == 1) {
					pw2.hand.setText("" + game.getDiscard().peek());
					game.getPlayer2().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 3 == 2) {
					pw3.hand.setText("" + game.getDiscard().peek());
					game.getPlayer3().getHand().add(game.getDiscard().pop());
				}
			}
			if (numPlay == 4) {
				if (game.round % 4 == 0) {
					pw1.hand.setText("" + game.getDiscard().peek());
					game.getPlayer1().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 4 == 1) {
					pw2.hand.setText("" + game.getDiscard().peek());
					game.getPlayer2().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 4 == 2) {
					pw3.hand.setText("" + game.getDiscard().peek());
					game.getPlayer3().getHand().add(game.getDiscard().pop());
				}
				if (game.round % 4 == 3) {
					pw4.hand.setText("" + game.getDiscard().peek());
					game.getPlayer4().getHand().add(game.getDiscard().pop());
				}
			}
		}
		// each method is the same for every player, but in order to have the
		// method effect the correct player
		// methods needed to be created specifying which player is performing
		// the action
		// Player 1 Methods
		if (evt.getActionCommand().equals("show1")) {
			// shows the player's rack, use this when it is this player's turn
			for (int i = 0; i < 10; i++) {
				pw1.rack[i].setText("" + game.getPlayer1().getRack().get(i));
			}
		}
		if (evt.getActionCommand().equals("hide1")) {
			// hides the player's rack, use this when it is not your turn so
			// that the other players
			// cannot see your rack
			for (int i = 0; i < 10; i++) {
				pw1.rack[i].setText("");
			}
		}
		for (int i = 0; i < 10; i++) {
			// actions performed when swapping a card from your hand with one in
			// your rack,
			// the swapped card is immediately discarded
			if (evt.getActionCommand().equals("" + i + "_1")) {
				main.discardTop.setText("DISCARD TOP: "
						+ game.getPlayer1().getRack().get(i));
				game.getDiscard().push(game.getPlayer1().getRack().get(i));
				game.getPlayer1().getRack()
						.set(i, Integer.parseInt(pw1.hand.getText()));
				pw1.rack[i].setText(pw1.hand.getText());
				pw1.hand.setText("");
			}
		}
		if (evt.getActionCommand().equals("discard1")) {
			// used when the card you just drew is not being swapped with one in
			// your rack, simply discards the card
			game.getDiscard().push(Integer.parseInt(pw1.hand.getText()));
			main.discardTop.setText("DISCARD TOP:" + pw1.hand.getText());
			pw1.hand.setText("");
		}
		// used at the end of your turn. checks to see if you have "Rack-O" and
		// if so adds scores for each player
		// and starts a new hand, also checks to see if someone's score is over
		// 500, at which point the game is over.
		// also increments round
		// also checks to see if the draw pile is empty, and if so refills it
		if (evt.getActionCommand().equals("endTurn1")) {
			if (game.getPlayer1().rackO()) {
				hasRackO = "Player 1 has Rack-O!";
				JOptionPane.showMessageDialog(null, hasRackO);
				if (numPlay >= 2) {
					game.getPlayer1().sumScore();
					game.getPlayer2().sumScore();
					main.scores.setText("Player 1: "
							+ Integer.toString(game.getPlayer1().getScore())
							+ "\nPlayer 2: "
							+ Integer.toString(game.getPlayer2().getScore()));
					if (numPlay >= 3) {
						game.getPlayer3().sumScore();
						main.scores
								.setText("Player 1: "
										+ Integer.toString(game.getPlayer1()
												.getScore())
										+ "\nPlayer 2: "
										+ Integer.toString(game.getPlayer2()
												.getScore())
										+ "\nPlayer 3: "
										+ Integer.toString(game.getPlayer3()
												.getScore()));
						if (numPlay == 4) {
							game.getPlayer4().sumScore();
							main.scores.setText("Player 1: "
									+ Integer.toString(game.getPlayer1()
											.getScore())
									+ "\nPlayer 2: "
									+ Integer.toString(game.getPlayer2()
											.getScore())
									+ "\nPlayer 3: "
									+ Integer.toString(game.getPlayer3()
											.getScore())
									+ "\nPlayer 4: "
									+ Integer.toString(game.getPlayer4()
											.getScore()));
						}
					}
				}
				game.setRound(0);
				game.newHand(numPlay);
				if (numPlay >= 2) {
					for (int i = 0; i < 10; i++) {
						pw1.rack[i].setText("");
					}
					for (int i = 0; i < 10; i++) {
						pw2.rack[i].setText("");
					}
					if (numPlay >= 3) {
						for (int i = 0; i < 10; i++) {
							pw3.rack[i].setText("");
						}
						if (numPlay == 4) {
							for (int i = 0; i < 10; i++) {
								pw4.rack[i].setText("");
							}
						}
					}
				}
				drawDeckSize = 20;
				main.numCardsInDrawPile.setText(Integer.toString(drawDeckSize));
			}
			if (numPlay == 2) {
				if (game.getPlayer1().getScore() >= 500
						|| game.getPlayer2().getScore() >= 500) {
					congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
					JOptionPane.showMessageDialog(null, congratulations);
				}
			}
			if (numPlay >= 3) {
				if (game.getPlayer1().getScore() >= 500
						|| game.getPlayer2().getScore() >= 500
						|| game.getPlayer3().getScore() >= 500) {
					congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
					JOptionPane.showMessageDialog(null, congratulations);
				}
			}
			if (numPlay == 4) {
				if (game.getPlayer1().getScore() >= 500
						|| game.getPlayer2().getScore() >= 500
						|| game.getPlayer3().getScore() >= 500
						|| game.getPlayer4().getScore() >= 500) {
					congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
					JOptionPane.showMessageDialog(null, congratulations);
				}
			}

			for (int i = 0; i < 10; i++) {
				pw1.rack[i].setText("");
			}
			if (game.getDraw().empty()) {
				game.disToDraw();
				main.discardTop.setText("Empty");
				drawDeckSize = 20;
				main.numCardsInDrawPile.setText(Integer.toString(drawDeckSize));
			}
			game.setRound(game.getRound() + 1);
		}

		// Player 2
		if (evt.getActionCommand().equals("show2")) {
			for (int i = 0; i < 10; i++) {
				pw2.rack[i].setText("" + game.getPlayer2().getRack().get(i));
			}
		}
		if (evt.getActionCommand().equals("hide2")) {
			for (int i = 0; i < 10; i++) {
				pw2.rack[i].setText("");
			}
		}
		for (int i = 0; i < 10; i++) {
			if (evt.getActionCommand().equals("" + i + "_2")) {
				main.discardTop
						.setText("" + game.getPlayer2().getRack().get(i));
				game.getDiscard().push(game.getPlayer2().getRack().get(i));
				game.getPlayer2().getRack()
						.set(i, Integer.parseInt(pw2.hand.getText()));
				pw2.rack[i].setText(pw2.hand.getText());
				pw2.hand.setText("");
			}
		}
		if (evt.getActionCommand().equals("discard2")) {
			game.getDiscard().push(Integer.parseInt(pw2.hand.getText()));
			main.discardTop.setText(pw2.hand.getText());
			pw2.hand.setText("");
		}
		if (evt.getActionCommand().equals("endTurn2")) {
			if (game.getPlayer2().rackO()) {
				hasRackO = "Player 2 has Rack-O!";
				JOptionPane.showMessageDialog(null, hasRackO);
				if (numPlay >= 2) {
					game.getPlayer1().sumScore();
					game.getPlayer2().sumScore();
					main.scores.setText("Player 1: "
							+ Integer.toString(game.getPlayer1().getScore())
							+ "\nPlayer 2: "
							+ Integer.toString(game.getPlayer2().getScore()));
					if (numPlay >= 3) {
						game.getPlayer3().sumScore();
						main.scores
								.setText("Player 1: "
										+ Integer.toString(game.getPlayer1()
												.getScore())
										+ "\nPlayer 2: "
										+ Integer.toString(game.getPlayer2()
												.getScore())
										+ "\nPlayer 3: "
										+ Integer.toString(game.getPlayer3()
												.getScore()));
						if (numPlay == 4) {
							game.getPlayer4().sumScore();
							main.scores.setText("Player 1: "
									+ Integer.toString(game.getPlayer1()
											.getScore())
									+ "\nPlayer 2: "
									+ Integer.toString(game.getPlayer2()
											.getScore())
									+ "\nPlayer 3: "
									+ Integer.toString(game.getPlayer3()
											.getScore())
									+ "\nPlayer 4: "
									+ Integer.toString(game.getPlayer4()
											.getScore()));
						}
					}
				}
				game.setRound(0);
				game.newHand(numPlay);
				if (numPlay >= 2) {
					for (int i = 0; i < 10; i++) {
						pw1.rack[i].setText("");
					}
					for (int i = 0; i < 10; i++) {
						pw2.rack[i].setText("");
					}
					if (numPlay >= 3) {
						for (int i = 0; i < 10; i++) {
							pw3.rack[i].setText("");
						}
						if (numPlay == 4) {
							for (int i = 0; i < 10; i++) {
								pw4.rack[i].setText("");
							}
						}
					}

					drawDeckSize = 20;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				if (numPlay == 2) {
					if (game.getPlayer1().getScore() >= 500
							|| game.getPlayer2().getScore() >= 500) {
						congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
						JOptionPane.showMessageDialog(null, congratulations);
					}
				}
				if (numPlay >= 3) {
					if (game.getPlayer1().getScore() >= 500
							|| game.getPlayer2().getScore() >= 500
							|| game.getPlayer3().getScore() >= 500) {
						congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
						JOptionPane.showMessageDialog(null, congratulations);
					}
				}
				if (numPlay == 4) {
					if (game.getPlayer1().getScore() >= 500
							|| game.getPlayer2().getScore() >= 500
							|| game.getPlayer3().getScore() >= 500
							|| game.getPlayer4().getScore() >= 500) {
						congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
						JOptionPane.showMessageDialog(null, congratulations);
					}
				}
				for (int i = 0; i < 10; i++) {
					pw2.rack[i].setText("");
				}
				if (game.getDraw().empty()) {
					game.disToDraw();
					main.discardTop.setText("Empty");
					drawDeckSize = 20;
					main.numCardsInDrawPile.setText(Integer
							.toString(drawDeckSize));
				}
				game.setRound(game.getRound() + 1);
			}
			// Player 3
			if (evt.getActionCommand().equals("show3")) {
				for (int i = 0; i < 10; i++) {
					pw3.rack[i]
							.setText("" + game.getPlayer3().getRack().get(i));
				}
			}
			if (evt.getActionCommand().equals("hide3")) {

				for (int i = 0; i < 10; i++) {
					pw3.rack[i].setText("");
				}
			}
			for (int i = 0; i < 10; i++) {
				if (evt.getActionCommand().equals("" + i + "_3")) {

					main.discardTop.setText(""
							+ game.getPlayer3().getRack().get(i));
					game.getDiscard().push(game.getPlayer3().getRack().get(i));
					game.getPlayer3().getRack()
							.set(i, Integer.parseInt(pw3.hand.getText()));
					pw3.rack[i].setText(pw3.hand.getText());
					pw3.hand.setText("");
				}
			}
			if (evt.getActionCommand().equals("discard3")) {

				game.getDiscard().push(Integer.parseInt(pw3.hand.getText()));
				main.discardTop.setText(pw3.hand.getText());
				pw3.hand.setText("");
			}
			if (evt.getActionCommand().equals("endTurn3")) {
				if (game.getPlayer3().rackO()) {
					hasRackO = "Player 3 has Rack-O";
					JOptionPane.showMessageDialog(null, hasRackO);
					if (numPlay >= 2) {
						game.getPlayer1().sumScore();
						game.getPlayer2().sumScore();
						main.scores
								.setText("Player 1: "
										+ Integer.toString(game.getPlayer1()
												.getScore())
										+ "\nPlayer 2: "
										+ Integer.toString(game.getPlayer2()
												.getScore()));
						if (numPlay >= 3) {
							game.getPlayer3().sumScore();
							main.scores.setText("Player 1: "
									+ Integer.toString(game.getPlayer1()
											.getScore())
									+ "\nPlayer 2: "
									+ Integer.toString(game.getPlayer2()
											.getScore())
									+ "\nPlayer 3: "
									+ Integer.toString(game.getPlayer3()
											.getScore()));
							if (numPlay == 4) {
								game.getPlayer4().sumScore();
								main.scores.setText("Player 1: "
										+ Integer.toString(game.getPlayer1()
												.getScore())
										+ "\nPlayer 2: "
										+ Integer.toString(game.getPlayer2()
												.getScore())
										+ "\nPlayer 3: "
										+ Integer.toString(game.getPlayer3()
												.getScore())
										+ "\nPlayer 4: "
										+ Integer.toString(game.getPlayer4()
												.getScore()));
							}
						}
					}
					game.setRound(0);
					game.newHand(numPlay);
					if (numPlay >= 2) {
						for (int i = 0; i < 10; i++) {
							pw1.rack[i].setText("");
						}
						for (int i = 0; i < 10; i++) {
							pw2.rack[i].setText("");
						}
						if (numPlay >= 3) {
							for (int i = 0; i < 10; i++) {
								pw3.rack[i].setText("");
							}
							if (numPlay == 4) {
								for (int i = 0; i < 10; i++) {
									pw4.rack[i].setText("");
								}
							}
						}

						drawDeckSize = 20;
						main.numCardsInDrawPile.setText(Integer
								.toString(drawDeckSize));

						if (numPlay == 2) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
						if (numPlay >= 3) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500
									|| game.getPlayer3().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
						if (numPlay == 4) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500
									|| game.getPlayer3().getScore() >= 500
									|| game.getPlayer4().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
					}
					for (int i = 0; i < 10; i++) {
						pw3.rack[i].setText("");
					}
					if (game.getDraw().empty()) {
						game.disToDraw();
						main.discardTop.setText("Empty");
						drawDeckSize = 20;
						main.numCardsInDrawPile.setText(Integer
								.toString(drawDeckSize));
					}
					game.setRound(game.getRound() + 1);
				}
				// Player 4
				if (evt.getActionCommand().equals("show4")) {
					for (int i = 0; i < 10; i++) {
						pw4.rack[i].setText(""
								+ game.getPlayer4().getRack().get(i));
					}
				}
				if (evt.getActionCommand().equals("hide4")) {
					for (int i = 0; i < 10; i++) {
						pw4.rack[i].setText("");
					}
				}

				for (int i = 0; i < 10; i++) {
					if (evt.getActionCommand().equals("" + i + "_4")) {
						main.discardTop.setText(""
								+ game.getPlayer4().getRack().get(i));
						game.getDiscard().push(
								game.getPlayer4().getRack().get(i));
						game.getPlayer4().getRack()
								.set(i, Integer.parseInt(pw4.hand.getText()));
						pw4.rack[i].setText(pw4.hand.getText());
						pw4.hand.setText("");
					}
				}
				if (evt.getActionCommand().equals("discard4")) {
					game.getDiscard()
							.push(Integer.parseInt(pw4.hand.getText()));
					main.discardTop.setText(pw4.hand.getText());
					pw4.hand.setText("");
				}

				if (evt.getActionCommand().equals("endTurn4")) {
					if (game.getPlayer4().rackO()) {
						hasRackO = "Player 4 has Rack-O!";
						JOptionPane.showMessageDialog(null, hasRackO);
						if (numPlay >= 2) {
							game.getPlayer1().sumScore();
							game.getPlayer2().sumScore();
							main.scores.setText("Player 1: "
									+ Integer.toString(game.getPlayer1()
											.getScore())
									+ " Player 2: "
									+ Integer.toString(game.getPlayer2()
											.getScore()));
							if (numPlay >= 3) {
								game.getPlayer3().sumScore();
								main.scores.setText("Player 1: "
										+ Integer.toString(game.getPlayer1()
												.getScore())
										+ " Player 2: "
										+ Integer.toString(game.getPlayer2()
												.getScore())
										+ " Player 3: "
										+ Integer.toString(game.getPlayer3()
												.getScore()));
								if (numPlay == 4) {
									game.getPlayer4().sumScore();
									main.scores.setText("Player 1: "
											+ Integer.toString(game
													.getPlayer1().getScore())
											+ " Player 2: "
											+ Integer.toString(game
													.getPlayer2().getScore())
											+ " Player 3: "
											+ Integer.toString(game
													.getPlayer3().getScore())
											+ " Player 4: "
											+ Integer.toString(game
													.getPlayer4().getScore()));
								}
							}
						}
						game.setRound(0);
						game.newHand(numPlay);
						if (numPlay >= 2) {
							for (int i = 0; i < 10; i++) {
								pw1.rack[i].setText("");
							}
							for (int i = 0; i < 10; i++) {
								pw2.rack[i].setText("");
							}
							if (numPlay >= 3) {
								for (int i = 0; i < 10; i++) {
									pw3.rack[i].setText("");
								}
								if (numPlay == 4) {
									for (int i = 0; i < 10; i++) {
										pw4.rack[i].setText("");
									}
								}
							}

							drawDeckSize = 20;
							main.numCardsInDrawPile.setText(Integer
									.toString(drawDeckSize));
						}
						if (numPlay == 2) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
						if (numPlay >= 3) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500
									|| game.getPlayer3().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
						if (numPlay >= 4) {
							if (game.getPlayer1().getScore() >= 500
									|| game.getPlayer2().getScore() >= 500
									|| game.getPlayer3().getScore() >= 500
									|| game.getPlayer4().getScore() >= 500) {
								congratulations = "Game Over, thanks for playing! \nPress Reset Game to play again or simply close the program.";
								JOptionPane.showMessageDialog(null,
										congratulations);
							}
						}
						for (int i = 0; i < 10; i++) {
							pw4.rack[i].setText("");
						}
						if (game.getDraw().empty()) {
							game.disToDraw();
							main.discardTop.setText("Empty");
							drawDeckSize = 20;
							main.numCardsInDrawPile.setText(Integer
									.toString(drawDeckSize));
						}
						game.setRound(game.getRound() + 1);
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		Master a = new Master("Rack-O");
	}
}
